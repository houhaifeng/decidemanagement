/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.decide.model;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class Price implements TBase<Price, Price._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Price");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I64, (short)1);
  private static final TField PRODUCT_ID_FIELD_DESC = new TField("productId", TType.I64, (short)2);
  private static final TField PRICE_FIELD_DESC = new TField("price", TType.DOUBLE, (short)3);
  private static final TField PROMOTION_FIELD_DESC = new TField("promotion", TType.BOOL, (short)4);
  private static final TField FESTIVAL_FIELD_DESC = new TField("festival", TType.STRING, (short)5);
  private static final TField WEATHER_FIELD_DESC = new TField("weather", TType.I32, (short)6);
  private static final TField CITY_FIELD_DESC = new TField("city", TType.STRING, (short)7);
  private static final TField NEW_MODEL_FIELD_DESC = new TField("newModel", TType.I32, (short)8);
  private static final TField CREATE_DATE_FIELD_DESC = new TField("createDate", TType.I64, (short)9);

  private long id;
  private long productId;
  private double price;
  private boolean promotion;
  private String festival;
  private int weather;
  private String city;
  private int newModel;
  private long createDate;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    PRODUCT_ID((short)2, "productId"),
    PRICE((short)3, "price"),
    PROMOTION((short)4, "promotion"),
    FESTIVAL((short)5, "festival"),
    WEATHER((short)6, "weather"),
    CITY((short)7, "city"),
    NEW_MODEL((short)8, "newModel"),
    CREATE_DATE((short)9, "createDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PRODUCT_ID
          return PRODUCT_ID;
        case 3: // PRICE
          return PRICE;
        case 4: // PROMOTION
          return PROMOTION;
        case 5: // FESTIVAL
          return FESTIVAL;
        case 6: // WEATHER
          return WEATHER;
        case 7: // CITY
          return CITY;
        case 8: // NEW_MODEL
          return NEW_MODEL;
        case 9: // CREATE_DATE
          return CREATE_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PRODUCTID_ISSET_ID = 1;
  private static final int __PRICE_ISSET_ID = 2;
  private static final int __PROMOTION_ISSET_ID = 3;
  private static final int __WEATHER_ISSET_ID = 4;
  private static final int __NEWMODEL_ISSET_ID = 5;
  private static final int __CREATEDATE_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.PRODUCT_ID, new FieldMetaData("productId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.PRICE, new FieldMetaData("price", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.PROMOTION, new FieldMetaData("promotion", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.FESTIVAL, new FieldMetaData("festival", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.WEATHER, new FieldMetaData("weather", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CITY, new FieldMetaData("city", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.NEW_MODEL, new FieldMetaData("newModel", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CREATE_DATE, new FieldMetaData("createDate", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Price.class, metaDataMap);
  }

  public Price() {
  }

  public Price(
    long id,
    long productId,
    double price,
    boolean promotion,
    String festival,
    int weather,
    String city,
    int newModel,
    long createDate)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.productId = productId;
    setProductIdIsSet(true);
    this.price = price;
    setPriceIsSet(true);
    this.promotion = promotion;
    setPromotionIsSet(true);
    this.festival = festival;
    this.weather = weather;
    setWeatherIsSet(true);
    this.city = city;
    this.newModel = newModel;
    setNewModelIsSet(true);
    this.createDate = createDate;
    setCreateDateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Price(Price other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    this.productId = other.productId;
    this.price = other.price;
    this.promotion = other.promotion;
    if (other.isSetFestival()) {
      this.festival = other.festival;
    }
    this.weather = other.weather;
    if (other.isSetCity()) {
      this.city = other.city;
    }
    this.newModel = other.newModel;
    this.createDate = other.createDate;
  }

  public Price deepCopy() {
    return new Price(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setProductIdIsSet(false);
    this.productId = 0;
    setPriceIsSet(false);
    this.price = 0.0;
    setPromotionIsSet(false);
    this.promotion = false;
    this.festival = null;
    setWeatherIsSet(false);
    this.weather = 0;
    this.city = null;
    setNewModelIsSet(false);
    this.newModel = 0;
    setCreateDateIsSet(false);
    this.createDate = 0;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public long getProductId() {
    return this.productId;
  }

  public void setProductId(long productId) {
    this.productId = productId;
    setProductIdIsSet(true);
  }

  public void unsetProductId() {
    __isset_bit_vector.clear(__PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been asigned a value) and false otherwise */
  public boolean isSetProductId() {
    return __isset_bit_vector.get(__PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bit_vector.set(__PRODUCTID_ISSET_ID, value);
  }

  public double getPrice() {
    return this.price;
  }

  public void setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
  }

  public void unsetPrice() {
    __isset_bit_vector.clear(__PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been asigned a value) and false otherwise */
  public boolean isSetPrice() {
    return __isset_bit_vector.get(__PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bit_vector.set(__PRICE_ISSET_ID, value);
  }

  public boolean isPromotion() {
    return this.promotion;
  }

  public void setPromotion(boolean promotion) {
    this.promotion = promotion;
    setPromotionIsSet(true);
  }

  public void unsetPromotion() {
    __isset_bit_vector.clear(__PROMOTION_ISSET_ID);
  }

  /** Returns true if field promotion is set (has been asigned a value) and false otherwise */
  public boolean isSetPromotion() {
    return __isset_bit_vector.get(__PROMOTION_ISSET_ID);
  }

  public void setPromotionIsSet(boolean value) {
    __isset_bit_vector.set(__PROMOTION_ISSET_ID, value);
  }

  public String getFestival() {
    return this.festival;
  }

  public void setFestival(String festival) {
    this.festival = festival;
  }

  public void unsetFestival() {
    this.festival = null;
  }

  /** Returns true if field festival is set (has been asigned a value) and false otherwise */
  public boolean isSetFestival() {
    return this.festival != null;
  }

  public void setFestivalIsSet(boolean value) {
    if (!value) {
      this.festival = null;
    }
  }

  public int getWeather() {
    return this.weather;
  }

  public void setWeather(int weather) {
    this.weather = weather;
    setWeatherIsSet(true);
  }

  public void unsetWeather() {
    __isset_bit_vector.clear(__WEATHER_ISSET_ID);
  }

  /** Returns true if field weather is set (has been asigned a value) and false otherwise */
  public boolean isSetWeather() {
    return __isset_bit_vector.get(__WEATHER_ISSET_ID);
  }

  public void setWeatherIsSet(boolean value) {
    __isset_bit_vector.set(__WEATHER_ISSET_ID, value);
  }

  public String getCity() {
    return this.city;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been asigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public int getNewModel() {
    return this.newModel;
  }

  public void setNewModel(int newModel) {
    this.newModel = newModel;
    setNewModelIsSet(true);
  }

  public void unsetNewModel() {
    __isset_bit_vector.clear(__NEWMODEL_ISSET_ID);
  }

  /** Returns true if field newModel is set (has been asigned a value) and false otherwise */
  public boolean isSetNewModel() {
    return __isset_bit_vector.get(__NEWMODEL_ISSET_ID);
  }

  public void setNewModelIsSet(boolean value) {
    __isset_bit_vector.set(__NEWMODEL_ISSET_ID, value);
  }

  public long getCreateDate() {
    return this.createDate;
  }

  public void setCreateDate(long createDate) {
    this.createDate = createDate;
    setCreateDateIsSet(true);
  }

  public void unsetCreateDate() {
    __isset_bit_vector.clear(__CREATEDATE_ISSET_ID);
  }

  /** Returns true if field createDate is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return __isset_bit_vector.get(__CREATEDATE_ISSET_ID);
  }

  public void setCreateDateIsSet(boolean value) {
    __isset_bit_vector.set(__CREATEDATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Long)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case PROMOTION:
      if (value == null) {
        unsetPromotion();
      } else {
        setPromotion((Boolean)value);
      }
      break;

    case FESTIVAL:
      if (value == null) {
        unsetFestival();
      } else {
        setFestival((String)value);
      }
      break;

    case WEATHER:
      if (value == null) {
        unsetWeather();
      } else {
        setWeather((Integer)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case NEW_MODEL:
      if (value == null) {
        unsetNewModel();
      } else {
        setNewModel((Integer)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Long(getId());

    case PRODUCT_ID:
      return new Long(getProductId());

    case PRICE:
      return new Double(getPrice());

    case PROMOTION:
      return new Boolean(isPromotion());

    case FESTIVAL:
      return getFestival();

    case WEATHER:
      return new Integer(getWeather());

    case CITY:
      return getCity();

    case NEW_MODEL:
      return new Integer(getNewModel());

    case CREATE_DATE:
      return new Long(getCreateDate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PRODUCT_ID:
      return isSetProductId();
    case PRICE:
      return isSetPrice();
    case PROMOTION:
      return isSetPromotion();
    case FESTIVAL:
      return isSetFestival();
    case WEATHER:
      return isSetWeather();
    case CITY:
      return isSetCity();
    case NEW_MODEL:
      return isSetNewModel();
    case CREATE_DATE:
      return isSetCreateDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Price)
      return this.equals((Price)that);
    return false;
  }

  public boolean equals(Price that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_productId = true;
    boolean that_present_productId = true;
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_promotion = true;
    boolean that_present_promotion = true;
    if (this_present_promotion || that_present_promotion) {
      if (!(this_present_promotion && that_present_promotion))
        return false;
      if (this.promotion != that.promotion)
        return false;
    }

    boolean this_present_festival = true && this.isSetFestival();
    boolean that_present_festival = true && that.isSetFestival();
    if (this_present_festival || that_present_festival) {
      if (!(this_present_festival && that_present_festival))
        return false;
      if (!this.festival.equals(that.festival))
        return false;
    }

    boolean this_present_weather = true;
    boolean that_present_weather = true;
    if (this_present_weather || that_present_weather) {
      if (!(this_present_weather && that_present_weather))
        return false;
      if (this.weather != that.weather)
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_newModel = true;
    boolean that_present_newModel = true;
    if (this_present_newModel || that_present_newModel) {
      if (!(this_present_newModel && that_present_newModel))
        return false;
      if (this.newModel != that.newModel)
        return false;
    }

    boolean this_present_createDate = true;
    boolean that_present_createDate = true;
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (this.createDate != that.createDate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Price other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Price typedOther = (Price)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(typedOther.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = TBaseHelper.compareTo(this.productId, typedOther.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(typedOther.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = TBaseHelper.compareTo(this.price, typedOther.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPromotion()).compareTo(typedOther.isSetPromotion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPromotion()) {
      lastComparison = TBaseHelper.compareTo(this.promotion, typedOther.promotion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFestival()).compareTo(typedOther.isSetFestival());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFestival()) {
      lastComparison = TBaseHelper.compareTo(this.festival, typedOther.festival);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeather()).compareTo(typedOther.isSetWeather());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeather()) {
      lastComparison = TBaseHelper.compareTo(this.weather, typedOther.weather);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(typedOther.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = TBaseHelper.compareTo(this.city, typedOther.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewModel()).compareTo(typedOther.isSetNewModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewModel()) {
      lastComparison = TBaseHelper.compareTo(this.newModel, typedOther.newModel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(typedOther.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = TBaseHelper.compareTo(this.createDate, typedOther.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I64) {
            this.id = iprot.readI64();
            setIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PRODUCT_ID
          if (field.type == TType.I64) {
            this.productId = iprot.readI64();
            setProductIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PRICE
          if (field.type == TType.DOUBLE) {
            this.price = iprot.readDouble();
            setPriceIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PROMOTION
          if (field.type == TType.BOOL) {
            this.promotion = iprot.readBool();
            setPromotionIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // FESTIVAL
          if (field.type == TType.STRING) {
            this.festival = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // WEATHER
          if (field.type == TType.I32) {
            this.weather = iprot.readI32();
            setWeatherIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // CITY
          if (field.type == TType.STRING) {
            this.city = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // NEW_MODEL
          if (field.type == TType.I32) {
            this.newModel = iprot.readI32();
            setNewModelIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // CREATE_DATE
          if (field.type == TType.I64) {
            this.createDate = iprot.readI64();
            setCreateDateIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI64(this.id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
    oprot.writeI64(this.productId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PRICE_FIELD_DESC);
    oprot.writeDouble(this.price);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PROMOTION_FIELD_DESC);
    oprot.writeBool(this.promotion);
    oprot.writeFieldEnd();
    if (this.festival != null) {
      oprot.writeFieldBegin(FESTIVAL_FIELD_DESC);
      oprot.writeString(this.festival);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(WEATHER_FIELD_DESC);
    oprot.writeI32(this.weather);
    oprot.writeFieldEnd();
    if (this.city != null) {
      oprot.writeFieldBegin(CITY_FIELD_DESC);
      oprot.writeString(this.city);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(NEW_MODEL_FIELD_DESC);
    oprot.writeI32(this.newModel);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
    oprot.writeI64(this.createDate);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Price(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    sb.append(this.productId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("promotion:");
    sb.append(this.promotion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("festival:");
    if (this.festival == null) {
      sb.append("null");
    } else {
      sb.append(this.festival);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("weather:");
    sb.append(this.weather);
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newModel:");
    sb.append(this.newModel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    sb.append(this.createDate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

