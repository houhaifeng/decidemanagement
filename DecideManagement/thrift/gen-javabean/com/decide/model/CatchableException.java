/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.decide.model;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class CatchableException extends Exception implements TBase<CatchableException, CatchableException._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("CatchableException");

  private static final TField ERROR_FIELD_DESC = new TField("error", TType.I64, (short)1);
  private static final TField DESCRIPTION_FIELD_DESC = new TField("description", TType.STRING, (short)2);
  private static final TField CAUSE_INFO_FIELD_DESC = new TField("causeInfo", TType.STRING, (short)3);

  private long error;
  private String description;
  private String causeInfo;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ERROR((short)1, "error"),
    DESCRIPTION((short)2, "description"),
    CAUSE_INFO((short)3, "causeInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ERROR
          return ERROR;
        case 2: // DESCRIPTION
          return DESCRIPTION;
        case 3: // CAUSE_INFO
          return CAUSE_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ERROR_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ERROR, new FieldMetaData("error", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.DESCRIPTION, new FieldMetaData("description", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CAUSE_INFO, new FieldMetaData("causeInfo", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(CatchableException.class, metaDataMap);
  }

  public CatchableException() {
  }

  public CatchableException(
    long error,
    String description)
  {
    this();
    this.error = error;
    setErrorIsSet(true);
    this.description = description;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CatchableException(CatchableException other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.error = other.error;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetCauseInfo()) {
      this.causeInfo = other.causeInfo;
    }
  }

  public CatchableException deepCopy() {
    return new CatchableException(this);
  }

  @Override
  public void clear() {
    setErrorIsSet(false);
    this.error = 0;
    this.description = null;
    this.causeInfo = null;
  }

  public long getError() {
    return this.error;
  }

  public void setError(long error) {
    this.error = error;
    setErrorIsSet(true);
  }

  public void unsetError() {
    __isset_bit_vector.clear(__ERROR_ISSET_ID);
  }

  /** Returns true if field error is set (has been asigned a value) and false otherwise */
  public boolean isSetError() {
    return __isset_bit_vector.get(__ERROR_ISSET_ID);
  }

  public void setErrorIsSet(boolean value) {
    __isset_bit_vector.set(__ERROR_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been asigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getCauseInfo() {
    return this.causeInfo;
  }

  public void setCauseInfo(String causeInfo) {
    this.causeInfo = causeInfo;
  }

  public void unsetCauseInfo() {
    this.causeInfo = null;
  }

  /** Returns true if field causeInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetCauseInfo() {
    return this.causeInfo != null;
  }

  public void setCauseInfoIsSet(boolean value) {
    if (!value) {
      this.causeInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((Long)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case CAUSE_INFO:
      if (value == null) {
        unsetCauseInfo();
      } else {
        setCauseInfo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ERROR:
      return new Long(getError());

    case DESCRIPTION:
      return getDescription();

    case CAUSE_INFO:
      return getCauseInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ERROR:
      return isSetError();
    case DESCRIPTION:
      return isSetDescription();
    case CAUSE_INFO:
      return isSetCauseInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CatchableException)
      return this.equals((CatchableException)that);
    return false;
  }

  public boolean equals(CatchableException that) {
    if (that == null)
      return false;

    boolean this_present_error = true;
    boolean that_present_error = true;
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (this.error != that.error)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_causeInfo = true && this.isSetCauseInfo();
    boolean that_present_causeInfo = true && that.isSetCauseInfo();
    if (this_present_causeInfo || that_present_causeInfo) {
      if (!(this_present_causeInfo && that_present_causeInfo))
        return false;
      if (!this.causeInfo.equals(that.causeInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CatchableException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CatchableException typedOther = (CatchableException)other;

    lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = TBaseHelper.compareTo(this.error, typedOther.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCauseInfo()).compareTo(typedOther.isSetCauseInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCauseInfo()) {
      lastComparison = TBaseHelper.compareTo(this.causeInfo, typedOther.causeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ERROR
          if (field.type == TType.I64) {
            this.error = iprot.readI64();
            setErrorIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // DESCRIPTION
          if (field.type == TType.STRING) {
            this.description = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CAUSE_INFO
          if (field.type == TType.STRING) {
            this.causeInfo = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ERROR_FIELD_DESC);
    oprot.writeI64(this.error);
    oprot.writeFieldEnd();
    if (this.description != null) {
      oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
      oprot.writeString(this.description);
      oprot.writeFieldEnd();
    }
    if (this.causeInfo != null) {
      if (isSetCauseInfo()) {
        oprot.writeFieldBegin(CAUSE_INFO_FIELD_DESC);
        oprot.writeString(this.causeInfo);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CatchableException(");
    boolean first = true;

    sb.append("error:");
    sb.append(this.error);
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (isSetCauseInfo()) {
      if (!first) sb.append(", ");
      sb.append("causeInfo:");
      if (this.causeInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.causeInfo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (!isSetError()) {
      throw new TProtocolException("Required field 'error' is unset! Struct:" + toString());
    }

    if (!isSetDescription()) {
      throw new TProtocolException("Required field 'description' is unset! Struct:" + toString());
    }

  }

}

