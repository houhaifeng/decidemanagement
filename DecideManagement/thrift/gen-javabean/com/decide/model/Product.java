/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.decide.model;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class Product implements TBase<Product, Product._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Product");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I64, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField LINK_FIELD_DESC = new TField("link", TType.STRING, (short)3);
  private static final TField CATEGORY_FIELD_DESC = new TField("category", TType.STRING, (short)4);
  private static final TField BRAND_FIELD_DESC = new TField("brand", TType.STRING, (short)5);
  private static final TField IMAGE_FIELD_DESC = new TField("image", TType.STRING, (short)6);
  private static final TField VIEW_RATE_FIELD_DESC = new TField("viewRate", TType.I32, (short)7);
  private static final TField COLLECT_RATE_FIELD_DESC = new TField("collectRate", TType.I32, (short)8);
  private static final TField VISIBILTY_FIELD_DESC = new TField("visibilty", TType.BOOL, (short)9);
  private static final TField SCORE_FIELD_DESC = new TField("score", TType.DOUBLE, (short)10);
  private static final TField PARAMETERS_FIELD_DESC = new TField("parameters", TType.STRING, (short)11);
  private static final TField CREATE_DATE_FIELD_DESC = new TField("createDate", TType.I64, (short)12);
  private static final TField SOURCE_ID_FIELD_DESC = new TField("sourceId", TType.I64, (short)13);
  private static final TField SOURCE_FIELD_DESC = new TField("source", TType.STRING, (short)14);
  private static final TField EXIST_FIELD_DESC = new TField("exist", TType.BOOL, (short)15);
  private static final TField PRICE_FIELD_DESC = new TField("price", TType.DOUBLE, (short)16);

  private long id;
  private String name;
  private String link;
  private String category;
  private String brand;
  private String image;
  private int viewRate;
  private int collectRate;
  private boolean visibilty;
  private double score;
  private String parameters;
  private long createDate;
  private long sourceId;
  private String source;
  private boolean exist;
  private double price;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    LINK((short)3, "link"),
    CATEGORY((short)4, "category"),
    BRAND((short)5, "brand"),
    IMAGE((short)6, "image"),
    VIEW_RATE((short)7, "viewRate"),
    COLLECT_RATE((short)8, "collectRate"),
    VISIBILTY((short)9, "visibilty"),
    SCORE((short)10, "score"),
    PARAMETERS((short)11, "parameters"),
    CREATE_DATE((short)12, "createDate"),
    SOURCE_ID((short)13, "sourceId"),
    SOURCE((short)14, "source"),
    EXIST((short)15, "exist"),
    PRICE((short)16, "price");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // LINK
          return LINK;
        case 4: // CATEGORY
          return CATEGORY;
        case 5: // BRAND
          return BRAND;
        case 6: // IMAGE
          return IMAGE;
        case 7: // VIEW_RATE
          return VIEW_RATE;
        case 8: // COLLECT_RATE
          return COLLECT_RATE;
        case 9: // VISIBILTY
          return VISIBILTY;
        case 10: // SCORE
          return SCORE;
        case 11: // PARAMETERS
          return PARAMETERS;
        case 12: // CREATE_DATE
          return CREATE_DATE;
        case 13: // SOURCE_ID
          return SOURCE_ID;
        case 14: // SOURCE
          return SOURCE;
        case 15: // EXIST
          return EXIST;
        case 16: // PRICE
          return PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __VIEWRATE_ISSET_ID = 1;
  private static final int __COLLECTRATE_ISSET_ID = 2;
  private static final int __VISIBILTY_ISSET_ID = 3;
  private static final int __SCORE_ISSET_ID = 4;
  private static final int __CREATEDATE_ISSET_ID = 5;
  private static final int __SOURCEID_ISSET_ID = 6;
  private static final int __EXIST_ISSET_ID = 7;
  private static final int __PRICE_ISSET_ID = 8;
  private BitSet __isset_bit_vector = new BitSet(9);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LINK, new FieldMetaData("link", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CATEGORY, new FieldMetaData("category", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.BRAND, new FieldMetaData("brand", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.IMAGE, new FieldMetaData("image", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.VIEW_RATE, new FieldMetaData("viewRate", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.COLLECT_RATE, new FieldMetaData("collectRate", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.VISIBILTY, new FieldMetaData("visibilty", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.SCORE, new FieldMetaData("score", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.PARAMETERS, new FieldMetaData("parameters", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE, new FieldMetaData("createDate", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.SOURCE_ID, new FieldMetaData("sourceId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.SOURCE, new FieldMetaData("source", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXIST, new FieldMetaData("exist", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.PRICE, new FieldMetaData("price", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Product.class, metaDataMap);
  }

  public Product() {
  }

  public Product(
    long id,
    String name,
    String link,
    String category,
    String brand,
    String image,
    int viewRate,
    int collectRate,
    boolean visibilty,
    double score,
    String parameters,
    long createDate,
    long sourceId,
    String source,
    boolean exist,
    double price)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.link = link;
    this.category = category;
    this.brand = brand;
    this.image = image;
    this.viewRate = viewRate;
    setViewRateIsSet(true);
    this.collectRate = collectRate;
    setCollectRateIsSet(true);
    this.visibilty = visibilty;
    setVisibiltyIsSet(true);
    this.score = score;
    setScoreIsSet(true);
    this.parameters = parameters;
    this.createDate = createDate;
    setCreateDateIsSet(true);
    this.sourceId = sourceId;
    setSourceIdIsSet(true);
    this.source = source;
    this.exist = exist;
    setExistIsSet(true);
    this.price = price;
    setPriceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Product(Product other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetLink()) {
      this.link = other.link;
    }
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetBrand()) {
      this.brand = other.brand;
    }
    if (other.isSetImage()) {
      this.image = other.image;
    }
    this.viewRate = other.viewRate;
    this.collectRate = other.collectRate;
    this.visibilty = other.visibilty;
    this.score = other.score;
    if (other.isSetParameters()) {
      this.parameters = other.parameters;
    }
    this.createDate = other.createDate;
    this.sourceId = other.sourceId;
    if (other.isSetSource()) {
      this.source = other.source;
    }
    this.exist = other.exist;
    this.price = other.price;
  }

  public Product deepCopy() {
    return new Product(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.link = null;
    this.category = null;
    this.brand = null;
    this.image = null;
    setViewRateIsSet(false);
    this.viewRate = 0;
    setCollectRateIsSet(false);
    this.collectRate = 0;
    setVisibiltyIsSet(false);
    this.visibilty = false;
    setScoreIsSet(false);
    this.score = 0.0;
    this.parameters = null;
    setCreateDateIsSet(false);
    this.createDate = 0;
    setSourceIdIsSet(false);
    this.sourceId = 0;
    this.source = null;
    setExistIsSet(false);
    this.exist = false;
    setPriceIsSet(false);
    this.price = 0.0;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getLink() {
    return this.link;
  }

  public void setLink(String link) {
    this.link = link;
  }

  public void unsetLink() {
    this.link = null;
  }

  /** Returns true if field link is set (has been asigned a value) and false otherwise */
  public boolean isSetLink() {
    return this.link != null;
  }

  public void setLinkIsSet(boolean value) {
    if (!value) {
      this.link = null;
    }
  }

  public String getCategory() {
    return this.category;
  }

  public void setCategory(String category) {
    this.category = category;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been asigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public String getBrand() {
    return this.brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }

  public void unsetBrand() {
    this.brand = null;
  }

  /** Returns true if field brand is set (has been asigned a value) and false otherwise */
  public boolean isSetBrand() {
    return this.brand != null;
  }

  public void setBrandIsSet(boolean value) {
    if (!value) {
      this.brand = null;
    }
  }

  public String getImage() {
    return this.image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public void unsetImage() {
    this.image = null;
  }

  /** Returns true if field image is set (has been asigned a value) and false otherwise */
  public boolean isSetImage() {
    return this.image != null;
  }

  public void setImageIsSet(boolean value) {
    if (!value) {
      this.image = null;
    }
  }

  public int getViewRate() {
    return this.viewRate;
  }

  public void setViewRate(int viewRate) {
    this.viewRate = viewRate;
    setViewRateIsSet(true);
  }

  public void unsetViewRate() {
    __isset_bit_vector.clear(__VIEWRATE_ISSET_ID);
  }

  /** Returns true if field viewRate is set (has been asigned a value) and false otherwise */
  public boolean isSetViewRate() {
    return __isset_bit_vector.get(__VIEWRATE_ISSET_ID);
  }

  public void setViewRateIsSet(boolean value) {
    __isset_bit_vector.set(__VIEWRATE_ISSET_ID, value);
  }

  public int getCollectRate() {
    return this.collectRate;
  }

  public void setCollectRate(int collectRate) {
    this.collectRate = collectRate;
    setCollectRateIsSet(true);
  }

  public void unsetCollectRate() {
    __isset_bit_vector.clear(__COLLECTRATE_ISSET_ID);
  }

  /** Returns true if field collectRate is set (has been asigned a value) and false otherwise */
  public boolean isSetCollectRate() {
    return __isset_bit_vector.get(__COLLECTRATE_ISSET_ID);
  }

  public void setCollectRateIsSet(boolean value) {
    __isset_bit_vector.set(__COLLECTRATE_ISSET_ID, value);
  }

  public boolean isVisibilty() {
    return this.visibilty;
  }

  public void setVisibilty(boolean visibilty) {
    this.visibilty = visibilty;
    setVisibiltyIsSet(true);
  }

  public void unsetVisibilty() {
    __isset_bit_vector.clear(__VISIBILTY_ISSET_ID);
  }

  /** Returns true if field visibilty is set (has been asigned a value) and false otherwise */
  public boolean isSetVisibilty() {
    return __isset_bit_vector.get(__VISIBILTY_ISSET_ID);
  }

  public void setVisibiltyIsSet(boolean value) {
    __isset_bit_vector.set(__VISIBILTY_ISSET_ID, value);
  }

  public double getScore() {
    return this.score;
  }

  public void setScore(double score) {
    this.score = score;
    setScoreIsSet(true);
  }

  public void unsetScore() {
    __isset_bit_vector.clear(__SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been asigned a value) and false otherwise */
  public boolean isSetScore() {
    return __isset_bit_vector.get(__SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bit_vector.set(__SCORE_ISSET_ID, value);
  }

  public String getParameters() {
    return this.parameters;
  }

  public void setParameters(String parameters) {
    this.parameters = parameters;
  }

  public void unsetParameters() {
    this.parameters = null;
  }

  /** Returns true if field parameters is set (has been asigned a value) and false otherwise */
  public boolean isSetParameters() {
    return this.parameters != null;
  }

  public void setParametersIsSet(boolean value) {
    if (!value) {
      this.parameters = null;
    }
  }

  public long getCreateDate() {
    return this.createDate;
  }

  public void setCreateDate(long createDate) {
    this.createDate = createDate;
    setCreateDateIsSet(true);
  }

  public void unsetCreateDate() {
    __isset_bit_vector.clear(__CREATEDATE_ISSET_ID);
  }

  /** Returns true if field createDate is set (has been asigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return __isset_bit_vector.get(__CREATEDATE_ISSET_ID);
  }

  public void setCreateDateIsSet(boolean value) {
    __isset_bit_vector.set(__CREATEDATE_ISSET_ID, value);
  }

  public long getSourceId() {
    return this.sourceId;
  }

  public void setSourceId(long sourceId) {
    this.sourceId = sourceId;
    setSourceIdIsSet(true);
  }

  public void unsetSourceId() {
    __isset_bit_vector.clear(__SOURCEID_ISSET_ID);
  }

  /** Returns true if field sourceId is set (has been asigned a value) and false otherwise */
  public boolean isSetSourceId() {
    return __isset_bit_vector.get(__SOURCEID_ISSET_ID);
  }

  public void setSourceIdIsSet(boolean value) {
    __isset_bit_vector.set(__SOURCEID_ISSET_ID, value);
  }

  public String getSource() {
    return this.source;
  }

  public void setSource(String source) {
    this.source = source;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been asigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public boolean isExist() {
    return this.exist;
  }

  public void setExist(boolean exist) {
    this.exist = exist;
    setExistIsSet(true);
  }

  public void unsetExist() {
    __isset_bit_vector.clear(__EXIST_ISSET_ID);
  }

  /** Returns true if field exist is set (has been asigned a value) and false otherwise */
  public boolean isSetExist() {
    return __isset_bit_vector.get(__EXIST_ISSET_ID);
  }

  public void setExistIsSet(boolean value) {
    __isset_bit_vector.set(__EXIST_ISSET_ID, value);
  }

  public double getPrice() {
    return this.price;
  }

  public void setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
  }

  public void unsetPrice() {
    __isset_bit_vector.clear(__PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been asigned a value) and false otherwise */
  public boolean isSetPrice() {
    return __isset_bit_vector.get(__PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bit_vector.set(__PRICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case LINK:
      if (value == null) {
        unsetLink();
      } else {
        setLink((String)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((String)value);
      }
      break;

    case BRAND:
      if (value == null) {
        unsetBrand();
      } else {
        setBrand((String)value);
      }
      break;

    case IMAGE:
      if (value == null) {
        unsetImage();
      } else {
        setImage((String)value);
      }
      break;

    case VIEW_RATE:
      if (value == null) {
        unsetViewRate();
      } else {
        setViewRate((Integer)value);
      }
      break;

    case COLLECT_RATE:
      if (value == null) {
        unsetCollectRate();
      } else {
        setCollectRate((Integer)value);
      }
      break;

    case VISIBILTY:
      if (value == null) {
        unsetVisibilty();
      } else {
        setVisibilty((Boolean)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Double)value);
      }
      break;

    case PARAMETERS:
      if (value == null) {
        unsetParameters();
      } else {
        setParameters((String)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((Long)value);
      }
      break;

    case SOURCE_ID:
      if (value == null) {
        unsetSourceId();
      } else {
        setSourceId((Long)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case EXIST:
      if (value == null) {
        unsetExist();
      } else {
        setExist((Boolean)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Long(getId());

    case NAME:
      return getName();

    case LINK:
      return getLink();

    case CATEGORY:
      return getCategory();

    case BRAND:
      return getBrand();

    case IMAGE:
      return getImage();

    case VIEW_RATE:
      return new Integer(getViewRate());

    case COLLECT_RATE:
      return new Integer(getCollectRate());

    case VISIBILTY:
      return new Boolean(isVisibilty());

    case SCORE:
      return new Double(getScore());

    case PARAMETERS:
      return getParameters();

    case CREATE_DATE:
      return new Long(getCreateDate());

    case SOURCE_ID:
      return new Long(getSourceId());

    case SOURCE:
      return getSource();

    case EXIST:
      return new Boolean(isExist());

    case PRICE:
      return new Double(getPrice());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case LINK:
      return isSetLink();
    case CATEGORY:
      return isSetCategory();
    case BRAND:
      return isSetBrand();
    case IMAGE:
      return isSetImage();
    case VIEW_RATE:
      return isSetViewRate();
    case COLLECT_RATE:
      return isSetCollectRate();
    case VISIBILTY:
      return isSetVisibilty();
    case SCORE:
      return isSetScore();
    case PARAMETERS:
      return isSetParameters();
    case CREATE_DATE:
      return isSetCreateDate();
    case SOURCE_ID:
      return isSetSourceId();
    case SOURCE:
      return isSetSource();
    case EXIST:
      return isSetExist();
    case PRICE:
      return isSetPrice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Product)
      return this.equals((Product)that);
    return false;
  }

  public boolean equals(Product that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_link = true && this.isSetLink();
    boolean that_present_link = true && that.isSetLink();
    if (this_present_link || that_present_link) {
      if (!(this_present_link && that_present_link))
        return false;
      if (!this.link.equals(that.link))
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_brand = true && this.isSetBrand();
    boolean that_present_brand = true && that.isSetBrand();
    if (this_present_brand || that_present_brand) {
      if (!(this_present_brand && that_present_brand))
        return false;
      if (!this.brand.equals(that.brand))
        return false;
    }

    boolean this_present_image = true && this.isSetImage();
    boolean that_present_image = true && that.isSetImage();
    if (this_present_image || that_present_image) {
      if (!(this_present_image && that_present_image))
        return false;
      if (!this.image.equals(that.image))
        return false;
    }

    boolean this_present_viewRate = true;
    boolean that_present_viewRate = true;
    if (this_present_viewRate || that_present_viewRate) {
      if (!(this_present_viewRate && that_present_viewRate))
        return false;
      if (this.viewRate != that.viewRate)
        return false;
    }

    boolean this_present_collectRate = true;
    boolean that_present_collectRate = true;
    if (this_present_collectRate || that_present_collectRate) {
      if (!(this_present_collectRate && that_present_collectRate))
        return false;
      if (this.collectRate != that.collectRate)
        return false;
    }

    boolean this_present_visibilty = true;
    boolean that_present_visibilty = true;
    if (this_present_visibilty || that_present_visibilty) {
      if (!(this_present_visibilty && that_present_visibilty))
        return false;
      if (this.visibilty != that.visibilty)
        return false;
    }

    boolean this_present_score = true;
    boolean that_present_score = true;
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    boolean this_present_parameters = true && this.isSetParameters();
    boolean that_present_parameters = true && that.isSetParameters();
    if (this_present_parameters || that_present_parameters) {
      if (!(this_present_parameters && that_present_parameters))
        return false;
      if (!this.parameters.equals(that.parameters))
        return false;
    }

    boolean this_present_createDate = true;
    boolean that_present_createDate = true;
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (this.createDate != that.createDate)
        return false;
    }

    boolean this_present_sourceId = true;
    boolean that_present_sourceId = true;
    if (this_present_sourceId || that_present_sourceId) {
      if (!(this_present_sourceId && that_present_sourceId))
        return false;
      if (this.sourceId != that.sourceId)
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_exist = true;
    boolean that_present_exist = true;
    if (this_present_exist || that_present_exist) {
      if (!(this_present_exist && that_present_exist))
        return false;
      if (this.exist != that.exist)
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Product other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Product typedOther = (Product)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLink()).compareTo(typedOther.isSetLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLink()) {
      lastComparison = TBaseHelper.compareTo(this.link, typedOther.link);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = TBaseHelper.compareTo(this.category, typedOther.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrand()).compareTo(typedOther.isSetBrand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrand()) {
      lastComparison = TBaseHelper.compareTo(this.brand, typedOther.brand);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImage()).compareTo(typedOther.isSetImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage()) {
      lastComparison = TBaseHelper.compareTo(this.image, typedOther.image);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewRate()).compareTo(typedOther.isSetViewRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewRate()) {
      lastComparison = TBaseHelper.compareTo(this.viewRate, typedOther.viewRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectRate()).compareTo(typedOther.isSetCollectRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectRate()) {
      lastComparison = TBaseHelper.compareTo(this.collectRate, typedOther.collectRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisibilty()).compareTo(typedOther.isSetVisibilty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisibilty()) {
      lastComparison = TBaseHelper.compareTo(this.visibilty, typedOther.visibilty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(typedOther.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = TBaseHelper.compareTo(this.score, typedOther.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameters()).compareTo(typedOther.isSetParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameters()) {
      lastComparison = TBaseHelper.compareTo(this.parameters, typedOther.parameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(typedOther.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = TBaseHelper.compareTo(this.createDate, typedOther.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceId()).compareTo(typedOther.isSetSourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceId()) {
      lastComparison = TBaseHelper.compareTo(this.sourceId, typedOther.sourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExist()).compareTo(typedOther.isSetExist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExist()) {
      lastComparison = TBaseHelper.compareTo(this.exist, typedOther.exist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(typedOther.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = TBaseHelper.compareTo(this.price, typedOther.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I64) {
            this.id = iprot.readI64();
            setIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LINK
          if (field.type == TType.STRING) {
            this.link = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CATEGORY
          if (field.type == TType.STRING) {
            this.category = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // BRAND
          if (field.type == TType.STRING) {
            this.brand = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // IMAGE
          if (field.type == TType.STRING) {
            this.image = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // VIEW_RATE
          if (field.type == TType.I32) {
            this.viewRate = iprot.readI32();
            setViewRateIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // COLLECT_RATE
          if (field.type == TType.I32) {
            this.collectRate = iprot.readI32();
            setCollectRateIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // VISIBILTY
          if (field.type == TType.BOOL) {
            this.visibilty = iprot.readBool();
            setVisibiltyIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // SCORE
          if (field.type == TType.DOUBLE) {
            this.score = iprot.readDouble();
            setScoreIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // PARAMETERS
          if (field.type == TType.STRING) {
            this.parameters = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // CREATE_DATE
          if (field.type == TType.I64) {
            this.createDate = iprot.readI64();
            setCreateDateIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // SOURCE_ID
          if (field.type == TType.I64) {
            this.sourceId = iprot.readI64();
            setSourceIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // SOURCE
          if (field.type == TType.STRING) {
            this.source = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // EXIST
          if (field.type == TType.BOOL) {
            this.exist = iprot.readBool();
            setExistIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // PRICE
          if (field.type == TType.DOUBLE) {
            this.price = iprot.readDouble();
            setPriceIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI64(this.id);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.link != null) {
      oprot.writeFieldBegin(LINK_FIELD_DESC);
      oprot.writeString(this.link);
      oprot.writeFieldEnd();
    }
    if (this.category != null) {
      oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
      oprot.writeString(this.category);
      oprot.writeFieldEnd();
    }
    if (this.brand != null) {
      oprot.writeFieldBegin(BRAND_FIELD_DESC);
      oprot.writeString(this.brand);
      oprot.writeFieldEnd();
    }
    if (this.image != null) {
      oprot.writeFieldBegin(IMAGE_FIELD_DESC);
      oprot.writeString(this.image);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(VIEW_RATE_FIELD_DESC);
    oprot.writeI32(this.viewRate);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(COLLECT_RATE_FIELD_DESC);
    oprot.writeI32(this.collectRate);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(VISIBILTY_FIELD_DESC);
    oprot.writeBool(this.visibilty);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SCORE_FIELD_DESC);
    oprot.writeDouble(this.score);
    oprot.writeFieldEnd();
    if (this.parameters != null) {
      oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
      oprot.writeString(this.parameters);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
    oprot.writeI64(this.createDate);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
    oprot.writeI64(this.sourceId);
    oprot.writeFieldEnd();
    if (this.source != null) {
      oprot.writeFieldBegin(SOURCE_FIELD_DESC);
      oprot.writeString(this.source);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(EXIST_FIELD_DESC);
    oprot.writeBool(this.exist);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PRICE_FIELD_DESC);
    oprot.writeDouble(this.price);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Product(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("link:");
    if (this.link == null) {
      sb.append("null");
    } else {
      sb.append(this.link);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brand:");
    if (this.brand == null) {
      sb.append("null");
    } else {
      sb.append(this.brand);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("image:");
    if (this.image == null) {
      sb.append("null");
    } else {
      sb.append(this.image);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewRate:");
    sb.append(this.viewRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectRate:");
    sb.append(this.collectRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("visibilty:");
    sb.append(this.visibilty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("score:");
    sb.append(this.score);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parameters:");
    if (this.parameters == null) {
      sb.append("null");
    } else {
      sb.append(this.parameters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    sb.append(this.createDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceId:");
    sb.append(this.sourceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exist:");
    sb.append(this.exist);
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

