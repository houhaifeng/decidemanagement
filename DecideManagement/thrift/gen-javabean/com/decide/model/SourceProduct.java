/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.decide.model;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SourceProduct implements TBase<SourceProduct, SourceProduct._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("SourceProduct");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I64, (short)1);
  private static final TField PRODUCT_ID_FIELD_DESC = new TField("productId", TType.I64, (short)2);
  private static final TField SOURCE_FIELD_DESC = new TField("source", TType.STRING, (short)3);
  private static final TField SOURCE_ID_FIELD_DESC = new TField("sourceId", TType.I64, (short)4);
  private static final TField EXIST_FIELD_DESC = new TField("exist", TType.BOOL, (short)5);

  private long id;
  private long productId;
  private String source;
  private long sourceId;
  private boolean exist;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    PRODUCT_ID((short)2, "productId"),
    SOURCE((short)3, "source"),
    SOURCE_ID((short)4, "sourceId"),
    EXIST((short)5, "exist");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PRODUCT_ID
          return PRODUCT_ID;
        case 3: // SOURCE
          return SOURCE;
        case 4: // SOURCE_ID
          return SOURCE_ID;
        case 5: // EXIST
          return EXIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PRODUCTID_ISSET_ID = 1;
  private static final int __SOURCEID_ISSET_ID = 2;
  private static final int __EXIST_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.PRODUCT_ID, new FieldMetaData("productId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.SOURCE, new FieldMetaData("source", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SOURCE_ID, new FieldMetaData("sourceId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.EXIST, new FieldMetaData("exist", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(SourceProduct.class, metaDataMap);
  }

  public SourceProduct() {
  }

  public SourceProduct(
    long id,
    long productId,
    String source,
    long sourceId,
    boolean exist)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.productId = productId;
    setProductIdIsSet(true);
    this.source = source;
    this.sourceId = sourceId;
    setSourceIdIsSet(true);
    this.exist = exist;
    setExistIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SourceProduct(SourceProduct other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    this.productId = other.productId;
    if (other.isSetSource()) {
      this.source = other.source;
    }
    this.sourceId = other.sourceId;
    this.exist = other.exist;
  }

  public SourceProduct deepCopy() {
    return new SourceProduct(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setProductIdIsSet(false);
    this.productId = 0;
    this.source = null;
    setSourceIdIsSet(false);
    this.sourceId = 0;
    setExistIsSet(false);
    this.exist = false;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public long getProductId() {
    return this.productId;
  }

  public void setProductId(long productId) {
    this.productId = productId;
    setProductIdIsSet(true);
  }

  public void unsetProductId() {
    __isset_bit_vector.clear(__PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been asigned a value) and false otherwise */
  public boolean isSetProductId() {
    return __isset_bit_vector.get(__PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bit_vector.set(__PRODUCTID_ISSET_ID, value);
  }

  public String getSource() {
    return this.source;
  }

  public void setSource(String source) {
    this.source = source;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been asigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public long getSourceId() {
    return this.sourceId;
  }

  public void setSourceId(long sourceId) {
    this.sourceId = sourceId;
    setSourceIdIsSet(true);
  }

  public void unsetSourceId() {
    __isset_bit_vector.clear(__SOURCEID_ISSET_ID);
  }

  /** Returns true if field sourceId is set (has been asigned a value) and false otherwise */
  public boolean isSetSourceId() {
    return __isset_bit_vector.get(__SOURCEID_ISSET_ID);
  }

  public void setSourceIdIsSet(boolean value) {
    __isset_bit_vector.set(__SOURCEID_ISSET_ID, value);
  }

  public boolean isExist() {
    return this.exist;
  }

  public void setExist(boolean exist) {
    this.exist = exist;
    setExistIsSet(true);
  }

  public void unsetExist() {
    __isset_bit_vector.clear(__EXIST_ISSET_ID);
  }

  /** Returns true if field exist is set (has been asigned a value) and false otherwise */
  public boolean isSetExist() {
    return __isset_bit_vector.get(__EXIST_ISSET_ID);
  }

  public void setExistIsSet(boolean value) {
    __isset_bit_vector.set(__EXIST_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Long)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case SOURCE_ID:
      if (value == null) {
        unsetSourceId();
      } else {
        setSourceId((Long)value);
      }
      break;

    case EXIST:
      if (value == null) {
        unsetExist();
      } else {
        setExist((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Long(getId());

    case PRODUCT_ID:
      return new Long(getProductId());

    case SOURCE:
      return getSource();

    case SOURCE_ID:
      return new Long(getSourceId());

    case EXIST:
      return new Boolean(isExist());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PRODUCT_ID:
      return isSetProductId();
    case SOURCE:
      return isSetSource();
    case SOURCE_ID:
      return isSetSourceId();
    case EXIST:
      return isSetExist();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SourceProduct)
      return this.equals((SourceProduct)that);
    return false;
  }

  public boolean equals(SourceProduct that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_productId = true;
    boolean that_present_productId = true;
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_sourceId = true;
    boolean that_present_sourceId = true;
    if (this_present_sourceId || that_present_sourceId) {
      if (!(this_present_sourceId && that_present_sourceId))
        return false;
      if (this.sourceId != that.sourceId)
        return false;
    }

    boolean this_present_exist = true;
    boolean that_present_exist = true;
    if (this_present_exist || that_present_exist) {
      if (!(this_present_exist && that_present_exist))
        return false;
      if (this.exist != that.exist)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SourceProduct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SourceProduct typedOther = (SourceProduct)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(typedOther.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = TBaseHelper.compareTo(this.productId, typedOther.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceId()).compareTo(typedOther.isSetSourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceId()) {
      lastComparison = TBaseHelper.compareTo(this.sourceId, typedOther.sourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExist()).compareTo(typedOther.isSetExist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExist()) {
      lastComparison = TBaseHelper.compareTo(this.exist, typedOther.exist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I64) {
            this.id = iprot.readI64();
            setIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PRODUCT_ID
          if (field.type == TType.I64) {
            this.productId = iprot.readI64();
            setProductIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SOURCE
          if (field.type == TType.STRING) {
            this.source = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SOURCE_ID
          if (field.type == TType.I64) {
            this.sourceId = iprot.readI64();
            setSourceIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // EXIST
          if (field.type == TType.BOOL) {
            this.exist = iprot.readBool();
            setExistIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI64(this.id);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
    oprot.writeI64(this.productId);
    oprot.writeFieldEnd();
    if (this.source != null) {
      oprot.writeFieldBegin(SOURCE_FIELD_DESC);
      oprot.writeString(this.source);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
    oprot.writeI64(this.sourceId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(EXIST_FIELD_DESC);
    oprot.writeBool(this.exist);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SourceProduct(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    sb.append(this.productId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceId:");
    sb.append(this.sourceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exist:");
    sb.append(this.exist);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

